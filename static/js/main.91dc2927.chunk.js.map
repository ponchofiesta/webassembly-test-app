{"version":3,"sources":["components/Runner.js","components/Test.js","components/Tests.js","components/TestsPage.js","components/App.js","serviceWorker.js","index.js"],"names":["Runner","react_default","a","createElement","Button","this","props","name","Component","Test","Segment","Header","runners","map","runner","components_Runner","Tests","tests","test","components_Test","TestsPage","Container","as","components_Tests","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","defaultState","success","error","config","state","fetch","response","ok","Error","statusText","json","_context","t0","setState","_this2","Switch","Route","path","render","components_TestsPage","component","Boolean","window","location","hostname","match","ReactDOM","HashRouter","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUASeA,mLAJP,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,YAAaC,KAAKC,MAAMC,aAFlBC,+BCaNC,mLATP,OAAOR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACHT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KAASN,KAAKC,MAAMC,MAEhBF,KAAKC,MAAMM,QAAQC,IAAI,SAAAC,GAAM,OAAIb,EAAAC,EAAAC,cAACY,EAAWD,aAN1CN,aCUJQ,mLARP,OAAOf,EAAAC,EAAAC,cAAA,WAECE,KAAKC,MAAMW,MAAMJ,IAAI,SAAAK,GAAI,OAAIjB,EAAAC,EAAAC,cAACgB,EAASD,aALnCV,sBCULY,mLAPP,OAAOnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACHpB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAQW,GAAG,MAAX,SACArB,EAAAC,EAAAC,cAACoB,EAAD,CAAON,MAAOZ,KAAKC,MAAMW,gBAJbT,aC2CTgB,cArCX,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArB,KAAAmB,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAArB,KAAAqB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAzB,KAAMC,KAHVyB,aAAe,CAACC,SAAS,EAAOC,OAAO,EAAOC,OAAQ,MAIlDT,EAAKU,MAAQV,EAAKM,aAFHN,4MAMXU,EAAQ9B,KAAK0B,+BAEUK,MAAM,0BAAvBC,UACQC,yBACJC,MAAMF,EAASG,mCAEJH,EAASI,cAAxBP,SACNC,EAAMH,SAAU,EAChBG,EAAMD,OAASA,oDAEfC,EAAMF,MAANS,EAAAC,WAEJtC,KAAKuC,SAAST,gJAGX,IAAAU,EAAAxC,KACL,OAAIA,KAAK8B,MAAMF,MACJhC,EAAAC,EAAAC,cAAA,oCAA4BE,KAAK8B,MAAMF,OACvC5B,KAAK8B,MAAMD,OACXjC,EAAAC,EAAAC,cAAA,YACHF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACI7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAQ,kBAAMhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAWjC,MAAO4B,EAAKV,MAAMD,OAAOjB,WAClEhB,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOC,KAAK,YAAYG,UAAW1C,MAIpCR,EAAAC,EAAAC,cAAA,gCApCCK,aCME4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yECRNC,IAASR,OACLhD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,KACIzD,EAAAC,EAAAC,cAACwD,EAAD,OAEFC,SAASC,eAAe,SDmHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.91dc2927.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Button, Divider, Grid, Header, Icon, Search, Segment} from \"semantic-ui-react\";\n\nclass Runner extends Component {\n    render() {\n        return <Button>Run {this.props.name}</Button>\n    }\n}\n\nexport default Runner;\n","import React, { Component } from 'react';\nimport Runner from \"./Runner\";\nimport {Header, Segment} from 'semantic-ui-react'\n\nclass Test extends Component {\n\n    render() {\n        return <Segment>\n            <Header>{this.props.name}</Header>\n            {\n                this.props.runners.map(runner => <Runner {...runner}/>)\n            }\n        </Segment>\n    }\n}\n\nexport default Test;\n","import React, { Component } from 'react';\nimport Test from \"./Test\";\n\nclass Tests extends Component {\n\n    render() {\n        return <div>\n            {\n                this.props.tests.map(test => <Test {...test}/>)\n            }\n        </div>\n    }\n}\n\nexport default Tests;\n","import React, { Component } from 'react';\nimport Tests from \"./Tests\";\nimport {Container, Header} from \"semantic-ui-react\";\n\nclass TestsPage extends Component {\n    render() {\n        return <Container>\n            <Header as='h1'>Tests</Header>\n            <Tests tests={this.props.tests}/>\n        </Container>\n    }\n}\n\nexport default TestsPage;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Route, Switch} from \"react-router-dom\";\nimport TestsPage from \"./TestsPage\";\nimport Test from \"./Test\";\n\nclass App extends Component {\n\n    defaultState = {success: false, error: false, config: null};\n\n    constructor(props) {\n        super(props);\n        this.state = this.defaultState;\n    }\n\n    async componentDidMount() {\n        let state = this.defaultState;\n        try {\n            const response = await fetch('config.json');\n            if (!response.ok) {\n                throw Error(response.statusText)\n            }\n            const config = await response.json();\n            state.success = true;\n            state.config = config;\n        } catch (error) {\n            state.error = error;\n        }\n        this.setState(state);\n    }\n\n  render() {\n      if (this.state.error) {\n          return <div>Something went wrong: {this.state.error}</div>\n      } else if (this.state.config) {\n          return <main>\n              <Switch>\n                  <Route path='/' render={() => <TestsPage tests={this.state.config.tests}/>}/>\n                  <Route path='/test/:id' component={Test}/>\n              </Switch>\n          </main>\n      } else {\n          return <div>Loading...</div>\n      }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}