{"version":3,"sources":["../../webassembly-tests-rust/pkg/webassembly_benchmarks_rust.js"],"names":["passStringToWasm","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","cachegetUint8Memory","getUint8Memory","buffer","Uint8Array","strings_dynamic","a","b","strings_static","repeat","fibonacci","n","encodeInto","arg","size","length","ptr","offset","mem","code","charCodeAt","slice","view","subarray","written","buf","encode","set","cachegetInt32Memory","getInt32Memory","Int32Array","cachedTextDecoder","TextDecoder","getStringFromWasm","len","decode","hanoi","from","to","via","memi32","v0","retptr","sort","prime","max","aes","deflate","heap","Array","fill","undefined","push","stack_pointer","convolve","canvas","obj","Error","addBorrowedObject","passArray8ToWasm","cachegetUint8ClampedMemory","getClampedArrayU8FromWasm","Uint8ClampedArray","convolve_video","data","width","height","factor","count","heap_next","addHeapObject","idx","prepare_test_data","test","reset_test_data","clear_test_data","sum","iterate","getObject","takeObject","ret","dropObject","handleError","e","cachegetUint32Memory","__wbindgen_object_drop_ref","arg0","__wbindgen_string_new","arg1","__wbindgen_json_serialize","JSON","stringify","ret0","ret1","__widl_instanceof_CanvasRenderingContext2D","CanvasRenderingContext2D","__widl_f_get_image_data_CanvasRenderingContext2D","arg2","arg3","arg4","getImageData","__widl_f_put_image_data_CanvasRenderingContext2D","putImageData","__widl_f_get_context_HTMLCanvasElement","getContext","x","__widl_f_width_HTMLCanvasElement","__widl_f_height_HTMLCanvasElement","__widl_f_new_with_u8_clamped_array_and_sh_ImageData","ImageData","__widl_f_width_ImageData","__widl_f_height_ImageData","__widl_f_data_ImageData","__widl_f_debug_1_","console","debug","__wbindgen_string_get","Uint32Array","__wbindgen_debug_string","debugString","val","type","concat","description","name","isArray","i","builtInMatches","exec","toString","call","className","_","message","stack","__wbindgen_throw"],"mappings":"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","file":"static/js/3.46bafee7.chunk.js","sourcesContent":["import * as wasm from './webassembly_benchmarks_rust_bg.wasm';\nlet WASM_VECTOR_LEN = 0;\nlet cachedTextEncoder = new TextEncoder('utf-8');\nlet cachegetUint8Memory = null;\n\nfunction getUint8Memory() {\n  if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory;\n}\n\nlet passStringToWasm;\n\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n  passStringToWasm = function (arg) {\n    let size = arg.length;\n\n    let ptr = wasm.__wbindgen_malloc(size);\n\n    let offset = 0;\n    {\n      const mem = getUint8Memory();\n\n      for (; offset < arg.length; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n      }\n    }\n\n    if (offset !== arg.length) {\n      arg = arg.slice(offset);\n      ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n      const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n      const ret = cachedTextEncoder.encodeInto(arg, view);\n      offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n  };\n} else {\n  passStringToWasm = function (arg) {\n    let size = arg.length;\n\n    let ptr = wasm.__wbindgen_malloc(size);\n\n    let offset = 0;\n    {\n      const mem = getUint8Memory();\n\n      for (; offset < arg.length; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n      }\n    }\n\n    if (offset !== arg.length) {\n      const buf = cachedTextEncoder.encode(arg.slice(offset));\n      ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n      getUint8Memory().set(buf, ptr + offset);\n      offset += buf.length;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n  };\n}\n/**\n* @param {string} a\n* @param {string} b\n*/\n\n\nexport function strings_dynamic(a, b) {\n  wasm.strings_dynamic(passStringToWasm(a), WASM_VECTOR_LEN, passStringToWasm(b), WASM_VECTOR_LEN);\n}\n/**\n* @param {number} repeat\n*/\n\nexport function strings_static(repeat) {\n  wasm.strings_static(repeat);\n}\n/**\n* @param {number} n\n* @returns {number}\n*/\n\nexport function fibonacci(n) {\n  const ret = wasm.fibonacci(n);\n  return ret;\n}\nlet cachegetInt32Memory = null;\n\nfunction getInt32Memory() {\n  if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n/**\n* @param {number} n\n* @param {string} from\n* @param {string} to\n* @param {string} via\n* @returns {string}\n*/\n\n\nexport function hanoi(n, from, to, via) {\n  const retptr = 8;\n  const ret = wasm.hanoi(retptr, n, passStringToWasm(from), WASM_VECTOR_LEN, passStringToWasm(to), WASM_VECTOR_LEN, passStringToWasm(via), WASM_VECTOR_LEN);\n  const memi32 = getInt32Memory();\n  const v0 = getStringFromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n\n  wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n\n  return v0;\n}\n/**\n*/\n\nexport function sort() {\n  wasm.sort();\n}\n/**\n* @param {number} max\n*/\n\nexport function prime(max) {\n  wasm.prime(max);\n}\n/**\n*/\n\nexport function aes() {\n  wasm.aes();\n}\n/**\n*/\n\nexport function deflate() {\n  wasm.deflate();\n}\nconst heap = new Array(32);\nheap.fill(undefined);\nheap.push(undefined, null, true, false);\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n  if (stack_pointer == 1) throw new Error('out of js stack');\n  heap[--stack_pointer] = obj;\n  return stack_pointer;\n}\n/**\n* @param {any} canvas\n*/\n\n\nexport function convolve(canvas) {\n  try {\n    wasm.convolve(addBorrowedObject(canvas));\n  } finally {\n    heap[stack_pointer++] = undefined;\n  }\n}\n\nfunction passArray8ToWasm(arg) {\n  const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n\n  getUint8Memory().set(arg, ptr / 1);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n\nlet cachegetUint8ClampedMemory = null;\n\nfunction getUint8ClampedMemory() {\n  if (cachegetUint8ClampedMemory === null || cachegetUint8ClampedMemory.buffer !== wasm.memory.buffer) {\n    cachegetUint8ClampedMemory = new Uint8ClampedArray(wasm.memory.buffer);\n  }\n\n  return cachegetUint8ClampedMemory;\n}\n\nfunction getClampedArrayU8FromWasm(ptr, len) {\n  return getUint8ClampedMemory().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {Uint8ClampedArray} data\n* @param {number} width\n* @param {number} height\n* @param {number} factor\n* @param {number} count\n* @returns {Uint8ClampedArray}\n*/\n\n\nexport function convolve_video(data, width, height, factor, count) {\n  const retptr = 8;\n  const ret = wasm.convolve_video(retptr, passArray8ToWasm(data), WASM_VECTOR_LEN, width, height, factor, count);\n  const memi32 = getInt32Memory();\n  const v0 = getClampedArrayU8FromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n\n  wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n\n  return v0;\n}\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\n/**\n* @param {string} test\n* @param {any} data\n*/\n\n\nexport function prepare_test_data(test, data) {\n  wasm.prepare_test_data(passStringToWasm(test), WASM_VECTOR_LEN, addHeapObject(data));\n}\n/**\n* @param {string} test\n*/\n\nexport function reset_test_data(test) {\n  wasm.reset_test_data(passStringToWasm(test), WASM_VECTOR_LEN);\n}\n/**\n* @param {string} test\n*/\n\nexport function clear_test_data(test) {\n  wasm.clear_test_data(passStringToWasm(test), WASM_VECTOR_LEN);\n}\n/**\n* @param {number} repeat\n*/\n\nexport function sum(repeat) {\n  wasm.sum(repeat);\n}\n/**\n* @param {number} max\n*/\n\nexport function iterate(max) {\n  wasm.iterate(max);\n}\n\nfunction getObject(idx) {\n  return heap[idx];\n}\n\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\n\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\n\nfunction handleError(e) {\n  wasm.__wbindgen_exn_store(addHeapObject(e));\n}\n\nfunction isLikeNone(x) {\n  return x === undefined || x === null;\n}\n\nlet cachegetUint32Memory = null;\n\nfunction getUint32Memory() {\n  if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory;\n}\n\nfunction debugString(val) {\n  // primitive types\n  const type = typeof val;\n\n  if (type == 'number' || type == 'boolean' || val == null) {\n    return \"\".concat(val);\n  }\n\n  if (type == 'string') {\n    return \"\\\"\".concat(val, \"\\\"\");\n  }\n\n  if (type == 'symbol') {\n    const description = val.description;\n\n    if (description == null) {\n      return 'Symbol';\n    } else {\n      return \"Symbol(\".concat(description, \")\");\n    }\n  }\n\n  if (type == 'function') {\n    const name = val.name;\n\n    if (typeof name == 'string' && name.length > 0) {\n      return \"Function(\".concat(name, \")\");\n    } else {\n      return 'Function';\n    }\n  } // objects\n\n\n  if (Array.isArray(val)) {\n    const length = val.length;\n    let debug = '[';\n\n    if (length > 0) {\n      debug += debugString(val[0]);\n    }\n\n    for (let i = 1; i < length; i++) {\n      debug += ', ' + debugString(val[i]);\n    }\n\n    debug += ']';\n    return debug;\n  } // Test for built-in\n\n\n  const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n  let className;\n\n  if (builtInMatches.length > 1) {\n    className = builtInMatches[1];\n  } else {\n    // Failed to match the standard '[object ClassName]'\n    return toString.call(val);\n  }\n\n  if (className == 'Object') {\n    // we're a user defined class or Object\n    // JSON.stringify avoids problems with cycles, and is generally much\n    // easier than looping through ownProperties of `val`.\n    try {\n      return 'Object(' + JSON.stringify(val) + ')';\n    } catch (_) {\n      return 'Object';\n    }\n  } // errors\n\n\n  if (val instanceof Error) {\n    return \"\".concat(val.name, \": \").concat(val.message, \"\\n\").concat(val.stack);\n  } // TODO we could test for more things here, like `Set`s and `Map`s.\n\n\n  return className;\n}\n\nexport const __wbindgen_object_drop_ref = function (arg0) {\n  takeObject(arg0);\n};\nexport const __wbindgen_string_new = function (arg0, arg1) {\n  const ret = getStringFromWasm(arg0, arg1);\n  return addHeapObject(ret);\n};\nexport const __wbindgen_json_serialize = function (arg0, arg1) {\n  const ret = JSON.stringify(getObject(arg1));\n  const ret0 = passStringToWasm(ret);\n  const ret1 = WASM_VECTOR_LEN;\n  getInt32Memory()[arg0 / 4 + 0] = ret0;\n  getInt32Memory()[arg0 / 4 + 1] = ret1;\n};\nexport const __widl_instanceof_CanvasRenderingContext2D = function (arg0) {\n  const ret = getObject(arg0) instanceof CanvasRenderingContext2D;\n  return ret;\n};\nexport const __widl_f_get_image_data_CanvasRenderingContext2D = function (arg0, arg1, arg2, arg3, arg4) {\n  try {\n    const ret = getObject(arg0).getImageData(arg1, arg2, arg3, arg4);\n    return addHeapObject(ret);\n  } catch (e) {\n    handleError(e);\n  }\n};\nexport const __widl_f_put_image_data_CanvasRenderingContext2D = function (arg0, arg1, arg2, arg3) {\n  try {\n    getObject(arg0).putImageData(getObject(arg1), arg2, arg3);\n  } catch (e) {\n    handleError(e);\n  }\n};\nexport const __widl_f_get_context_HTMLCanvasElement = function (arg0, arg1, arg2) {\n  try {\n    const ret = getObject(arg0).getContext(getStringFromWasm(arg1, arg2));\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n  } catch (e) {\n    handleError(e);\n  }\n};\nexport const __widl_f_width_HTMLCanvasElement = function (arg0) {\n  const ret = getObject(arg0).width;\n  return ret;\n};\nexport const __widl_f_height_HTMLCanvasElement = function (arg0) {\n  const ret = getObject(arg0).height;\n  return ret;\n};\nexport const __widl_f_new_with_u8_clamped_array_and_sh_ImageData = function (arg0, arg1, arg2, arg3) {\n  try {\n    const ret = new ImageData(getClampedArrayU8FromWasm(arg0, arg1), arg2 >>> 0, arg3 >>> 0);\n    return addHeapObject(ret);\n  } catch (e) {\n    handleError(e);\n  }\n};\nexport const __widl_f_width_ImageData = function (arg0) {\n  const ret = getObject(arg0).width;\n  return ret;\n};\nexport const __widl_f_height_ImageData = function (arg0) {\n  const ret = getObject(arg0).height;\n  return ret;\n};\nexport const __widl_f_data_ImageData = function (arg0, arg1) {\n  const ret = getObject(arg1).data;\n  const ret0 = passArray8ToWasm(ret);\n  const ret1 = WASM_VECTOR_LEN;\n  getInt32Memory()[arg0 / 4 + 0] = ret0;\n  getInt32Memory()[arg0 / 4 + 1] = ret1;\n};\nexport const __widl_f_debug_1_ = function (arg0) {\n  console.debug(getObject(arg0));\n};\nexport const __wbindgen_string_get = function (arg0, arg1) {\n  const obj = getObject(arg0);\n  if (typeof obj !== 'string') return 0;\n  const ptr = passStringToWasm(obj);\n  getUint32Memory()[arg1 / 4] = WASM_VECTOR_LEN;\n  const ret = ptr;\n  return ret;\n};\nexport const __wbindgen_debug_string = function (arg0, arg1) {\n  const ret = debugString(getObject(arg1));\n  const ret0 = passStringToWasm(ret);\n  const ret1 = WASM_VECTOR_LEN;\n  getInt32Memory()[arg0 / 4 + 0] = ret0;\n  getInt32Memory()[arg0 / 4 + 1] = ret1;\n};\nexport const __wbindgen_throw = function (arg0, arg1) {\n  throw new Error(getStringFromWasm(arg0, arg1));\n};"],"sourceRoot":""}