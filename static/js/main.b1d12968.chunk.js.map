{"version":3,"sources":["components/Tests.js","components/Test.js","components/App.js","serviceWorker.js","index.js"],"names":["Tests","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","success","error","data","setState","fetch","response","ok","statusText","json","_context","t0","react_default","a","createElement","JSON","stringify","Component","Test","App","Switch","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SA2CeA,cAvCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,SAAS,EACTC,OAAO,EACPC,KAAM,MANKV,mNAYXG,KAAKQ,SAAS,CAACH,SAAS,EAAOC,OAAO,EAAOC,KAAM,gBAC5BE,MAAM,yBAAvBC,UACQC,0BACVX,KAAKQ,SAAS,CAACF,MAAOI,EAASE,wDAGhBF,EAASG,eAAtBN,SACNP,KAAKQ,SAAS,CAACH,SAAS,EAAME,2DAE9BP,KAAKQ,SAAS,CAACF,MAAKQ,EAAAC,kJAKxB,OAAIf,KAAKI,MAAME,MACJU,EAAAC,EAAAC,cAAA,oCAA4BlB,KAAKI,MAAME,OACvCN,KAAKI,MAAMG,KACXS,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,WAAMC,KAAKC,UAAUpB,KAAKI,MAAMG,KAAM,KAAM,KAGzCS,EAAAC,EAAAC,cAAA,gCApCCG,aCMLC,mLAJP,OAAON,EAAAC,EAAAC,cAAA,+BAFIG,aCiBJE,mLAXX,OACEP,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWhC,IAC3BqB,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWL,aAN3BD,aCMEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECRNC,IAASC,OACLlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACInB,EAAAC,EAAAC,cAACkB,EAAD,OAEFC,SAASC,eAAe,SDmHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b1d12968.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Tests extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            success: false,\n            error: false,\n            data: null,\n        };\n    }\n\n    async componentDidMount() {\n        try {\n            this.setState({success: false, error: false, data: null});\n            const response = await fetch('tests.json');\n            if (!response.ok) {\n                this.setState({error: response.statusText});\n                return;\n            }\n            const data = await response.json();\n            this.setState({success: true, data});\n        } catch (error) {\n            this.setState({error});\n        }\n    }\n\n    render() {\n        if (this.state.error) {\n            return <div>Something went wrong: {this.state.error}</div>\n        } else if (this.state.data) {\n            return <div>\n                <strong>Loaded some data:</strong>\n                <pre>{JSON.stringify(this.state.data, null, 2)}</pre>\n            </div>\n        } else {\n            return <div>Loading...</div>\n        }\n    }\n}\n\nexport default Tests;\n","import React, { Component } from 'react';\n\nclass Test extends Component {\n    render() {\n        return <p>Single test</p>\n    }\n}\n\nexport default Test;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Route, Switch} from \"react-router-dom\";\nimport Tests from \"./Tests\";\nimport Test from \"./Test\";\n\nclass App extends Component {\n  render() {\n    return (\n      <main>\n        <Switch>\n          <Route path='/' component={Tests}/>\n          <Route path='/test/:id' component={Test}/>\n        </Switch>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}