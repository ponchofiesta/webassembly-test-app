{"version":3,"sources":["lib/benchmarks/Benchmark.js","lib/benchmarks/sort/SortJS.js","lib/benchmarks/prime/SieveOfAtkinPrimeJS.js","lib/benchmarks/aes/AesJS.js","lib/benchmarks/deflate/DeflateJS.js","lib/benchmarks/ImageBenchmark.js","lib/benchmarks/convolve/ConvolveJS.js","lib/benchmarks/convolve/ConvolveRust.js","lib/benchmarks/DefaultBenchmark.js","lib/benchmarks/VideoBenchmark.js","lib/benchmarks/convolve_video/ConvolveVideoJS.js","lib/benchmarks/convolve_video/ConvolveVideoRust.js","lib/benchmarks/convolve_video/ConvolveVideoGo.js","lib/benchmarks/sha/Sha256JS.js","lib/benchmarks/dom/DomJS.js","lib/benchmarks/sha/Sha256CryptoJS.js","lib/benchmarks/sha/Sha512CryptoJS.js","lib/benchmarks/sha/Sha512JS.js","lib/benchmarks/base64/Base64JS.js","lib/benchmarks/base64/Base64btoaJS.js","lib/util.js","lib/config.js","lib/mediaLoader.js","lib/benchmarkRunner.js","components/Benchmark.js","components/BenchmarksPage.js","components/WebassemblyTestApp.js","serviceWorker.js","index.js"],"names":["Benchmark","startTime","stopTime","result","onLoad","start","this","performance","now","stop","results","SortJS","sort","data","firstEl","secondEl","name","run","benchmark","console","debug","constructor","JSON","parse","stringify","externalData","super","SieveOfAtkinPrimeJS","AesJS","aes_encrypt","key","iv","aesjs","cbc","encrypt","aes_decrypt","decrypt","parameters","DeflateJS","deflate","pako","raw","ImageBenchmark","image","canvas","context","onDraw","document","createElement","width","height","getContext","drawImage","ConvolveJS","convoluteFilter","matrix","factor","side","Math","round","sqrt","length","halfSide","floor","outputData","Uint8ClampedArray","y","x","outputIndex","r","g","b","cy","cx","scy","scx","sourceIndex","modify","imageData","getImageData","set","convolve","putImageData","ConvolveRust","window","wasm","rust","convolve_mem","DefaultBenchmark","method","type","Error","VideoBenchmark","video","frameCount","onEnd","resolveOrReject","getVideoFrame","videoWidth","videoHeight","renderVideo","paused","requestAnimationFrame","style","promise","Promise","resolve","reject","addEventListener","play","ConvolveVideoJS","count","half","i","index","cpx","ConvolveVideoRust","convolve_video","ConvolveVideoGo","Sha256JS","sha256","input","md","forge","create","update","digest","toHex","forEach","byte","String","fromCharCode","DomJS","dom","n","body","container","appendChild","header","textContent","paragraph","removeChild","Sha256CryptoJS","crypto","subtle","Array","from","Uint8Array","map","toString","slice","join","buffer","Sha512CryptoJS","sha512","Sha512JS","Base64JS","base64js","fromByteArray","Base64btoaJS","btoa","roundFormatter","value","decimals","toFixed","fpsFormatter","areaChartOptions","chart","animations","enabled","markers","size","dataLabels","formatter","xaxis","title","text","categories","yaxis","labels","legend","show","align","tooltip","config","players","js","logo","color","benchmarksets","description","benchmarks","player","newInstance","benchmarkset","base64","base64_prepared","path","repeat","error","sha256_prepared","aes","deflate_prepared","showCanvas","loadExternalData","async","element","Image","includes","src","HTMLImageElement","event","HTMLVideoElement","load","errorEvent","mediaLoader","response","fetch","arrayBuffer","clone","json","e","array","fill","flat","doExternalData","what","Object","keys","playerName","some","prepare_test_data","reset_test_data","clear_test_data","resetExternalData","runBenchmarkset","prepareExternalData","series","colors","push","instance","clearExternalData","Component","fitToParent","ratio","parentElement","clientWidth","setMediaElement","parent","innerHTML","seriesAvg","avg","reduce","a","render","Segment","Header","as","floated","props","Subheader","Button","circular","basic","icon","content","onClick","onRun","disabled","someRunning","loading","running","clear","List","horizontal","divided","Item","avatar","alt","Content","Fragment","ref","div","options","Table","definition","celled","Row","HeaderCell","Body","Cell","Message","stack","BenchmarksPage","setStatePromise","state","setState","setTimeout","onRunAllBenchmarksets","progress","progressTotal","onRunBenchmarkset","onBenchmarksetLoad","entry","filter","assign","benchEntry","Container","Divider","hidden","bench","Progress","total","WebassemblyTestApp","componentDidMount","all","then","module","catch","message","component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.388cb608.chunk.js","sourcesContent":["class Benchmark {\n\n    startTime = null;\n    stopTime = null;\n    result = null;\n    onLoad = () => {};\n\n    start() {\n        this.startTime = performance.now();\n    }\n\n    stop() {\n        this.stopTime = performance.now();\n        this.result = this.stopTime - this.startTime;\n    }\n\n    results() {\n        return this.result;\n    }\n}\nexport default Benchmark;\n","import Benchmark from \"../Benchmark\";\n\nclass SortJS extends Benchmark {\n\n    sort(data) {\n        return data.sort((firstEl, secondEl) => {\n            if (firstEl.name < secondEl.name) {\n                return -1;\n            } else if (firstEl.name > secondEl.name) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n\n    run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n        // deep copy whole array\n        let data = JSON.parse(JSON.stringify(benchmark.externalData.data));\n        super.start();\n        this.sort(data);\n        super.stop();\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default SortJS;\n","import Benchmark from \"../Benchmark\";\n\nclass SieveOfAtkinPrimeJS extends Benchmark {\n\n    prime(max) {\n        let primes = [];\n\n        if (max > 2)\n            primes.push(2);\n        if (max > 3)\n            primes.push(3);\n\n        // Initialise the sieve array with false values\n        let sieve = Array(max).fill(false);\n\n        for (let x = 1; x * x < max; x++) {\n            for (let y = 1; y * y < max; y++) {\n\n                // Main part of Sieve of Atkin\n                let n = (4 * x * x) + (y * y);\n                if (n <= max && (n % 12 === 1 || n % 12 === 5))\n                    sieve[n] ^= true;\n\n                n = (3 * x * x) + (y * y);\n                if (n <= max && n % 12 === 7)\n                    sieve[n] ^= true;\n\n                n = (3 * x * x) - (y * y);\n                if (x > y && n <= max && n % 12 === 11)\n                    sieve[n] ^= true;\n            }\n        }\n\n        // Mark all multiples of squares as non-prime\n        for (let r = 5; r * r < max; r++) {\n            if (sieve[r]) {\n                for (let i = r * r; i < max; i += r * r)\n                    sieve[i] = false;\n            }\n        }\n\n        // Print primes using sieve[]\n        for (let a = 5; a < max; a++)\n            if (sieve[a])\n                primes.push(a);\n\n        return primes;\n    }\n\n\n    run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n        this.start();\n        this.prime(...benchmark.parameters);\n        this.stop();\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default SieveOfAtkinPrimeJS;\n","import Benchmark from \"../Benchmark\";\nimport * as aesjs from \"aes-js\";\n\nclass AesJS extends Benchmark {\n\n    aes_encrypt(key, iv, data) {\n        let aesCtr = new aesjs.ModeOfOperation.cbc(key, iv);\n        return aesCtr.encrypt(data);\n    }\n\n    aes_decrypt(key, iv, data) {\n        let aesCtr = new aesjs.ModeOfOperation.cbc(key, iv);\n        return aesCtr.decrypt(data);\n    }\n\n    run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n        // deep copy whole array\n        //let dataBytes = aesjs.utils.utf8.toBytes(benchmark.externalData.data);\n        super.start();\n        this.aes_encrypt(...benchmark.parameters, benchmark.externalData.data);\n        super.stop();\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default AesJS;\n","import Benchmark from \"../Benchmark\";\nimport pako from \"pako\";\n\nclass DeflateJS extends Benchmark {\n\n    deflate(data) {\n        return pako.deflate(data, {raw: true});\n    }\n\n    run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n        super.start();\n        this.deflate(benchmark.externalData.data);\n        super.stop();\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default DeflateJS;\n","import Benchmark from \"./Benchmark\";\n\nclass ImageBenchmark extends Benchmark {\n\n    image = null;\n    canvas = null;\n    context = null;\n    onDraw = () => {};\n\n    async run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n\n        // draw image on canvas\n        this.image = benchmark.externalData.data;\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = this.image.width;\n        this.canvas.height = this.image.height;\n        this.context = this.canvas.getContext('2d');\n        this.context.drawImage(this.image, 0, 0);\n\n        await this.onLoad({\n            ...benchmark,\n            canvas: this.canvas\n        });\n\n        super.start();\n        this.onDraw();\n        super.stop();\n\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default ImageBenchmark;\n","import ImageBenchmark from \"../ImageBenchmark\";\n\nclass ConvolveJS extends ImageBenchmark {\n\n    constructor() {\n        super();\n        super.onDraw = () => {\n            const imageData = this.context.getImageData(0, 0, this.canvas.width, this.canvas.height);\n            imageData.data.set(this.convolve(imageData.data, this.canvas.width, this.canvas.height));\n            this.context.putImageData(imageData, 0, 0);\n        };\n    }\n\n    convolve(data, width, height) {\n        let blur = [\n            0.0, 0.2, 0.0,\n            0.2, 0.2, 0.2,\n            0.0, 0.2, 0.0\n        ];\n        return this.convoluteFilter(data, width, height, blur, 1);\n    }\n\n    convoluteFilter = (data, width, height, matrix, factor) => {\n        const side = Math.round(Math.sqrt(matrix.length));\n        const halfSide = Math.floor(side / 2);\n        const outputData = new Uint8ClampedArray(width * height * 4);\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const outputIndex = (y * width + x) * 4;\n                let r = 0.0;\n                let g = 0.0;\n                let b = 0.0;\n                for (let cy = 0; cy < side; cy++) {\n                    for (let cx = 0; cx < side; cx++) {\n                        const scy = y + cy - halfSide;\n                        const scx = x + cx - halfSide;\n                        if (scy >= 0 && scy < height && scx >= 0 && scx < width) {\n                            const sourceIndex = (scy * width + scx) * 4;\n                            const modify = matrix[cy * side + cx];\n                            r += data[sourceIndex] * modify;\n                            g += data[sourceIndex + 1] * modify;\n                            b += data[sourceIndex + 2] * modify;\n                        }\n                    }\n                }\n                outputData[outputIndex] = r * factor;\n                outputData[outputIndex + 1] = g * factor;\n                outputData[outputIndex + 2] = b * factor;\n                outputData[outputIndex + 3] = data[outputIndex + 3];\n            }\n        }\n        return outputData;\n    };\n}\nexport default ConvolveJS;\n","import ImageBenchmark from \"../ImageBenchmark\";\n\nclass ConvolveRust extends ImageBenchmark {\n\n    constructor() {\n        super();\n        super.onDraw = () => {\n            const imageData = this.context.getImageData(0, 0, this.canvas.width, this.canvas.height);\n            imageData.data.set(window.wasm.rust.convolve_mem(imageData.data, this.canvas.width, this.canvas.height));\n            this.context.putImageData(imageData, 0, 0);\n        };\n    }\n}\nexport default ConvolveRust;\n","import Benchmark from \"./Benchmark\";\n\nclass DefaultBenchmark extends Benchmark {\n\n    method;\n\n    constructor(method) {\n        super();\n        const type = typeof method;\n        if (type !== \"function\") {\n            throw new Error(\"method parameter must be a function, actually it is '\" + type + \"'.\");\n        }\n        this.method = method;\n    }\n\n    run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n\n        super.start();\n        this.method(benchmark);\n        super.stop();\n\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\n\nexport default DefaultBenchmark;\n","import Benchmark from \"./Benchmark\";\n\nclass VideoBenchmark extends Benchmark {\n\n    canvas = null;\n    context = null;\n    video = null;\n    frameCount = 0;\n    onDraw = null;\n\n    onEnd = resolveOrReject => {\n        super.stop();\n        console.debug(\"stop \" + this.constructor.name);\n        resolveOrReject();\n    };\n\n    getVideoFrame = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = this.video.videoWidth;\n        canvas.height =  this.video.videoHeight;\n        const context = canvas.getContext('2d');\n        context.drawImage(this.video, 0, 0, canvas.width, canvas.height);\n        const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n        return imageData;\n    };\n\n    renderVideo = () => {\n        this.onDraw();\n        if (!this.video.paused) {\n            requestAnimationFrame(this.renderVideo);\n        }\n    };\n\n    async run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n\n        this.video = benchmark.externalData.data;\n        this.video.style = \"display: none;\";\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = this.video.videoWidth;\n        canvas.height = this.video.videoHeight;\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d');\n\n        await this.onLoad({\n            ...benchmark,\n            video: benchmark.externalData.data,\n            canvas: canvas\n        });\n\n        const promise = new Promise((resolve, reject) => {\n            this.video.addEventListener(\"ended\", () => {\n                this.onEnd(resolve);\n            }, false);\n            this.video.addEventListener(\"error\", () => {\n                this.onEnd(reject);\n            }, false);\n        });\n\n        super.start();\n\n        this.video.play();\n        this.renderVideo();\n\n        return promise;\n    }\n\n    results() {\n        this.result = this.frameCount / (this.stopTime - this.startTime) * 1000;\n        return this.result;\n    }\n}\nexport default VideoBenchmark;\n","import VideoBenchmark from \"../VideoBenchmark\";\n\nclass ConvolveVideoJS extends VideoBenchmark {\n\n    constructor() {\n        super();\n        super.onDraw = () => {\n            let imageData = this.getVideoFrame();\n            imageData.data.set(this.convolve(imageData.data, this.video.videoWidth, this.video.videoHeight, [[1, 1, 1], [1, 1, 1], [1, 1, 1]],1/9,6));\n            this.context.putImageData(imageData, 0, 0);\n            this.frameCount++;\n        };\n    }\n\n    convolve(data, width, height, matrix, factor, count=1) {\n        const side = matrix.length;\n        const half = Math.floor(side / 2);\n        for (let i = 0; i < count; i += 1) {\n            for (let y = 1; y < height - 1; y += 1) {\n                for (let x = 1; x < width - 1; x += 1) {\n                    const index = (y * width + x) * 4;\n                    let r = 0;\n                    let g = 0;\n                    let b = 0;\n                    for (let cy = 0; cy < side; ++cy) {\n                        for (let cx = 0; cx < side; ++cx) {\n                            const cpx = ((y + (cy - half)) * width + (x + (cx - half))) * 4;\n                            r += data[cpx] * matrix[cy][cx];\n                            g += data[cpx + 1] * matrix[cy][cx];\n                            b += data[cpx + 2] * matrix[cy][cx];\n                        }\n                    }\n\n                    data[index] = factor * r;\n                    data[index + 1] = factor * g;\n                    data[index + 2] = factor * b;\n                }\n            }\n        }\n        return data;\n    }\n}\nexport default ConvolveVideoJS;\n","import VideoBenchmark from \"../VideoBenchmark\";\n\nclass ConvolveVideoRust extends VideoBenchmark {\n\n    constructor() {\n        super();\n        super.onDraw = () => {\n            let imageData = this.getVideoFrame();\n            imageData.data.set(this.convolve(imageData.data, this.video.videoWidth, this.video.videoHeight));\n            this.context.putImageData(imageData, 0, 0);\n            this.frameCount++;\n        };\n    }\n\n    convolve(data, width, height) {\n        const outData = window.wasm.rust.convolve_video(data, this.video.videoWidth, this.video.videoHeight, 1/9, 6);\n        return outData;\n    }\n}\nexport default ConvolveVideoRust;\n","import VideoBenchmark from \"../VideoBenchmark\";\n\nclass ConvolveVideoGo extends VideoBenchmark {\n\n    constructor() {\n        super();\n        super.onDraw = () => {\n            let imageData = this.getVideoFrame();\n            imageData.data.set(this.convolve(imageData.data, this.video.videoWidth, this.video.videoHeight));\n            this.context.putImageData(imageData, 0, 0);\n            this.frameCount++;\n        };\n    }\n\n    convolve(data, width, height) {\n        data = window.wasm.go.convolve_video(data, this.canvas.width, this.canvas.height, 1/9, 6);\n        return data;\n    }\n}\nexport default ConvolveVideoGo;\n","import Benchmark from \"../Benchmark\";\nimport forge from 'node-forge';\n\nclass Sha256JS extends Benchmark {\n\n    sha256(input) {\n        const md = forge.md.sha256.create();\n        md.update(input);\n        let hex = md.digest().toHex();\n        return hex;\n    }\n\n    run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n        let data = \"\";\n        benchmark.externalData.data.forEach(byte => data += String.fromCharCode(byte));\n        this.start();\n        this.sha256(data);\n        this.stop();\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default Sha256JS;\n","import Benchmark from \"../Benchmark\";\n\nclass DomJS extends Benchmark {\n\n    dom(n) {\n        const body = document.body;\n        const container = document.createElement(\"div\");\n        body.appendChild(container);\n\n        for (let i = 0; i < n; i++) {\n            const header = document.createElement(\"h3\");\n            header.textContent = \"Header \" + i;\n            const paragraph = document.createElement(\"p\");\n            paragraph.textContent = \"Paragraph \" + i;\n            container.appendChild(header);\n            container.appendChild(paragraph);\n        }\n\n        body.removeChild(container);\n    }\n\n    run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n        super.start();\n        this.dom(...benchmark.parameters);\n        super.stop();\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default DomJS;\n","import Benchmark from \"../Benchmark\";\n\nclass Sha256CryptoJS extends Benchmark {\n\n    async sha256(input) {\n        const digest = await crypto.subtle.digest('SHA-256', input);\n        const array = Array.from(new Uint8Array(digest));\n        const hex = array.map(byte => ('00' + byte.toString(16)).slice(-2)).join('');\n        return hex;\n    }\n\n    async run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n        this.start();\n        await this.sha256(benchmark.externalData.data.buffer);\n        this.stop();\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default Sha256CryptoJS;\n","import Benchmark from \"../Benchmark\";\n\nclass Sha512CryptoJS extends Benchmark {\n\n    async sha512(input) {\n        const digest = await crypto.subtle.digest('SHA-512', input);\n        const array = Array.from(new Uint8Array(digest));\n        const hex = array.map(byte => ('00' + byte.toString(16)).slice(-2)).join('');\n        return hex;\n    }\n\n    async run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n        this.start();\n        await this.sha512(benchmark.externalData.data.buffer);\n        this.stop();\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default Sha512CryptoJS;\n","import Benchmark from \"../Benchmark\";\nimport forge from 'node-forge';\n\nclass Sha512JS extends Benchmark {\n\n    sha512(input) {\n        const md = forge.md.sha512.create();\n        md.update(input);\n        let hex = md.digest().toHex();\n        return hex;\n    }\n\n    run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n        let data = \"\";\n        benchmark.externalData.data.forEach(byte => data += String.fromCharCode(byte));\n        this.start();\n        this.sha512(benchmark.externalData.data);\n        this.stop();\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default Sha512JS;\n","import Benchmark from \"../Benchmark\";\nimport base64js from \"base64-js\";\n\nclass Base64JS extends Benchmark {\n\n    run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n        super.start();\n        base64js.fromByteArray(benchmark.externalData.data);\n        super.stop();\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default Base64JS;\n","import Benchmark from \"../Benchmark\";\n\nclass Base64btoaJS extends Benchmark {\n\n    run(benchmark) {\n        console.debug(\"start \" + this.constructor.name);\n        let data = \"\";\n        for (let i = 0; i < benchmark.externalData.data.length; i++) {\n            data += String.fromCharCode(benchmark.externalData.data[i]);\n        }\n        super.start();\n        let result = btoa(data);\n        super.stop();\n        console.debug(\"stop \" + this.constructor.name);\n    }\n}\nexport default Base64btoaJS;\n","const roundFormatter = value => {\n    let decimals = 0;\n    if (value < 1) decimals = 3;\n    else if (value < 10) decimals = 2;\n    else if (value < 100) decimals = 1;\n    return value.toFixed(decimals);\n};\nconst msFormatter = value => roundFormatter(value) + \" ms\";\nconst fpsFormatter = value => roundFormatter(value) + \" fps\";\n\nexport {roundFormatter, msFormatter, fpsFormatter};\n","//import FibonacciJS from \"./benchmarks/fibonacci/FibonacciJS\";\n//import HanoiJS from \"./benchmarks/hanoi/HanoiJS\";\nimport SortJS from \"./benchmarks/sort/SortJS\";\nimport SieveOfAtkinPrimeJS from \"./benchmarks/prime/SieveOfAtkinPrimeJS\";\nimport AesJS from \"./benchmarks/aes/AesJS\";\nimport DeflateJS from \"./benchmarks/deflate/DeflateJS\";\nimport ConvolveJS from \"./benchmarks/convolve/ConvolveJS\";\nimport ConvolveRust from \"./benchmarks/convolve/ConvolveRust\";\nimport ConvolveGo from \"./benchmarks/convolve/ConvolveGo\";\nimport DefaultBenchmark from \"./benchmarks/DefaultBenchmark\";\n//import IterateJS from \"./benchmarks/iterate/IterateJS\";\n//import StringsDynamicJS from \"./benchmarks/strings/StringsDynamicJS\";\n//import RepeatingDefaultBenchmark from \"./benchmarks/RepeatingDefaultBenchmark\";\n//import StringsStaticJS from \"./benchmarks/strings/StringsStaticJS\";\n//import SumJS from \"./benchmarks/sum/SumJS\";\nimport ConvolveVideoJS from \"./benchmarks/convolve_video/ConvolveVideoJS\";\nimport ConvolveVideoRust from \"./benchmarks/convolve_video/ConvolveVideoRust\";\nimport ConvolveVideoGo from \"./benchmarks/convolve_video/ConvolveVideoGo\";\nimport Sha256JS from \"./benchmarks/sha/Sha256JS\";\n//import ExifReaderJS from \"./benchmarks/exif/ExifReaderJS\";\nimport DomJS from \"./benchmarks/dom/DomJS\";\nimport Sha256CryptoJS from \"./benchmarks/sha/Sha256CryptoJS\";\nimport Sha512CryptoJS from \"./benchmarks/sha/Sha512CryptoJS\";\nimport Sha512JS from \"./benchmarks/sha/Sha512JS\";\nimport Base64JS from \"./benchmarks/base64/Base64JS\";\nimport Base64btoaJS from \"./benchmarks/base64/Base64btoaJS\";\nimport {fpsFormatter, msFormatter, roundFormatter} from \"./util\";\n\nconst barChartOptions = {\n    chart: {\n        width: \"100%\",\n        height: 300,\n        type: \"bar\",\n        animations: {\n            enabled: false/*,\n            easing: 'easeinout',\n            speed: 200,\n            animateGradually: {\n                enabled: true,\n                delay: 0\n            },\n            dynamicAnimation: {\n                enabled: true,\n                speed: 200\n            }*/\n        }\n    },\n    markers: {\n        size: 7\n    },\n    dataLabels: {\n        enabled: true,\n        formatter: fpsFormatter\n    },\n    xaxis: {\n        title: {\n            text: \"Iterations\"\n        },\n        categories: []\n    },\n    yaxis: {\n        title: {\n            text: \"Frames per second\"\n        },\n        labels: {\n            formatter: fpsFormatter\n        }\n    },\n    legend: {\n        show: true\n    },\n    title: {\n        text: 'Frame rate',\n        align: 'left'\n    },\n    tooltip: {\n        y: {\n            formatter: fpsFormatter\n        }\n    }\n};\n\nconst areaChartOptions = {\n    chart: {\n        width: \"100%\",\n        height: 16,\n        type: \"line\",\n        animations: {\n            enabled: false/*,\n            easing: 'easeinout',\n            speed: 200,\n            animateGradually: {\n                enabled: true,\n                delay: 0\n            },\n            dynamicAnimation: {\n                enabled: true,\n                speed: 200\n            }*/\n        }\n    },\n    markers: {\n        size: 7\n    },\n    dataLabels: {\n        enabled: true,\n        formatter: roundFormatter\n    },\n    xaxis: {\n        title: {\n            text: \"Iterations\"\n        },\n        categories: []\n    },\n    yaxis: {\n        title: {\n            text: \"Duration in ms\"\n        },\n        labels: {\n            formatter: roundFormatter\n        }\n    },\n    legend: {\n        show: true\n    },\n    title: {\n        text: 'Time taken to run the benchmarks',\n        align: 'left'\n    },\n    tooltip: {\n        y: {\n            formatter: msFormatter\n        }\n    }\n};\n\n\nconst config = {\n    players: {\n        js: {\n            logo: \"logos/es-ecmascript-logo.svg\",\n            color: \"rgb(248,220,61)\",\n            type: \"js\"\n        },\n        rust: {\n            logo: \"logos/rust-logo-blk.svg\",\n            color: \"black\",\n            type: \"wasm\"\n        }/*,\n        go: {\n            logo: \"logos/Go-Logo_Aqua.svg\",\n            color: \"#2DBCAF\",\n            type: \"wasm\"\n        }*/\n    },\n    benchmarksets: [\n        {\n            name: \"Base64\",\n            description: \"Calculate Base64 string representation\",\n            benchmarks: [\n                {\n                    name: \"base64 btoa()\",\n                    player: \"js\",\n                    newInstance: () => new Base64btoaJS()\n                },\n                {\n                    name: \"base64\",\n                    player: \"js\",\n                    newInstance: () => new Base64JS()\n                },\n                {\n                    name: \"base64\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.base64(benchmarkset.externalData.data))\n                },\n                {\n                    name: \"base64 prepared\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.base64_prepared())\n                }/*,\n                {\n                    name: \"base64\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.base64(benchmarkset.externalData.data))\n                },\n                {\n                    name: \"base64 prepared\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.base64_prepared())\n                }*/\n            ],\n            parameters: [],\n            externalData: {\n                type: \"bytes\",\n                path: \"data/random1K.bin\",\n                repeat: 1000\n            },\n            repeat: 20,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },\n        /*{\n            name: \"Iterate\",\n            description: \"simple number iteration\",\n            benchmarks: [\n                {\n                    name: \"Iterate 100m\",\n                    player: \"js\",\n                    newInstance: () => new IterateJS()\n                },\n                {\n                    name: \"Iterate 100m\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.iterate(...benchmarkset.parameters))\n                },\n                {\n                    name: \"Iterate 100m\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.iterate(...benchmarkset.parameters))\n                }\n            ],\n            parameters: [\n                100000000\n            ],\n            repeat: 5,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },*/\n        /*{\n            name: \"Strings dynamic\",\n            description: \"Search for substring in string\",\n            benchmarks: [\n                {\n                    name: \"strings\",\n                    player: \"js\",\n                    newInstance: () => new StringsDynamicJS()\n                },\n                {\n                    name: \"strings\",\n                    player: \"rust\",\n                    newInstance: () => new RepeatingDefaultBenchmark(benchmarkset => window.wasm.rust.strings_dynamic(...benchmarkset.parameters))\n                },\n                {\n                    name: \"strings\",\n                    player: \"go\",\n                    newInstance: () => new RepeatingDefaultBenchmark(benchmarkset => window.wasm.go.strings_dynamic(...benchmarkset.parameters))\n                }\n            ],\n            parameters: [\n                10000, \"hello world\", \"world\"\n            ],\n            repeat: 5,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },\n        {\n            name: \"Strings static\",\n            description: \"Search for substring in string\",\n            benchmarks: [\n                {\n                    name: \"strings\",\n                    player: \"js\",\n                    newInstance: () => new StringsStaticJS()\n                },\n                {\n                    name: \"strings\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.strings_static(...benchmarkset.parameters))\n                },\n                {\n                    name: \"strings\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.strings_static(...benchmarkset.parameters))\n                }\n            ],\n            parameters: [\n                1000000\n            ],\n            repeat: 5,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },\n        {\n            name: \"Sum static\",\n            description: \"\",\n            benchmarks: [\n                {\n                    name: \"sum\",\n                    player: \"js\",\n                    newInstance: () => new SumJS()\n                },\n                {\n                    name: \"sum\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.sum(...benchmarkset.parameters))\n                },\n                {\n                    name: \"sum\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.sum(...benchmarkset.parameters))\n                }\n            ],\n            parameters: [\n                1000000\n            ],\n            repeat: 5,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },\n        {\n            name: \"Fibonacci sequence\",\n            description: \"Calculate the Fibonacci sequence for a given N\",\n            benchmarks: [\n                {\n                    name: \"Iterative 100m\",\n                    player: \"js\",\n                    newInstance: () => new FibonacciJS()\n                },\n                {\n                    name: \"Iterative 100m\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.fibonacci(...benchmarkset.parameters))\n                },\n                {\n                    name: \"Iterative 100m\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.fibonacci(...benchmarkset.parameters))\n                }\n            ],\n            parameters: [\n                100000000\n            ],\n            repeat: 5,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },\n        {\n            name: \"Towers of Hanoi\",\n            description: \"Move all disks from one tower to another and return the used moves as string\",\n            benchmarks: [\n                {\n                    name: \"Recursive 20\",\n                    player: \"js\",\n                    newInstance: () => new HanoiJS()\n                },\n                {\n                    name: \"Recursive 20\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.hanoi(...benchmarkset.parameters))\n                },\n                {\n                    name: \"Recursive 20\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.hanoi(...benchmarkset.parameters))\n                }\n            ],\n            parameters: [ 20, \"A\", \"B\", \"C\" ],\n            repeat: 5,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },*/\n        {\n            name: \"Sort\",\n            description: \"Sort a list of elements containing multiple fields\",\n            benchmarks: [\n                {\n                    name: \"Sort\",\n                    player: \"js\",\n                    newInstance: () => new SortJS()\n                },\n                {\n                    name: \"Sort\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.sort(...benchmarkset.parameters))\n                }/*,\n                {\n                    name: \"Sort\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.sort(...benchmarkset.parameters))\n                }*/\n            ],\n            parameters: [],\n            externalData: {\n                type: \"sort\",\n                path: \"data/users1000.json\",\n                repeat: 100\n            },\n            repeat: 20,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },\n        /*{\n            name: \"Prime numbers\",\n            description: \"Find primae numbers by using Sieve of Atkin\",\n            benchmarks: [\n                {\n                    name: \"Prime\",\n                    player: \"js\",\n                    newInstance: () => new SieveOfAtkinPrimeJS()\n                },\n                {\n                    name: \"Prime\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.prime(...benchmarkset.parameters))\n                },\n                {\n                    name: \"Prime\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.prime(...benchmarkset.parameters))\n                }\n            ],\n            parameters: [3000000],\n            repeat: 5,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },*/\n        {\n            name: \"SHA256\",\n            description: \"Calculate the SHA256 hash\",\n            benchmarks: [\n                {\n                    name: \"sha256 Forge\",\n                    player: \"js\",\n                    newInstance: () => new Sha256JS()\n                },\n                {\n                    name: \"sha256 Crypto API\",\n                    player: \"js\",\n                    newInstance: () => new Sha256CryptoJS()\n                },\n                {\n                    name: \"sha256\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.sha256(benchmarkset.externalData.data))\n                },\n                {\n                    name: \"sha256 data prepared\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.sha256_prepared())\n                }/*,\n                {\n                    name: \"sha256\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.sha256(benchmarkset.externalData.data))\n                },\n                {\n                    name: \"sha256 prepared\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.sha256_prepared())\n                }*/\n            ],\n            parameters: [],\n            externalData: {\n                type: \"bytes\",\n                path: \"data/random1K.bin\",\n                repeat: 1000\n                // path: \"data/8bytes.bin\",\n                // repeat: 1\n            },\n            repeat: 20,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },\n        {\n            name: \"SHA512\",\n            description: \"Calculate the SHA512 hash\",\n            benchmarks: [\n                {\n                    name: \"sha512 Forge\",\n                    player: \"js\",\n                    newInstance: () => new Sha512JS()\n                },\n                {\n                    name: \"sha512 Crypto API\",\n                    player: \"js\",\n                    newInstance: () => new Sha512CryptoJS()\n                },\n                {\n                    name: \"sha512\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.sha512(benchmarkset.externalData.data))\n                }/*,\n                {\n                    name: \"sha512\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.sha512(benchmarkset.externalData.data))\n                }*/\n            ],\n            parameters: [],\n            externalData: {\n                type: \"bytes\",\n                path: \"data/random1K.bin\",\n                repeat: 1000\n            },\n            repeat: 20,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },\n        {\n            name: \"Encryption\",\n            description: \"Encrypt data using AES\",\n            benchmarks: [\n                {\n                    name: \"AES CBC\",\n                    player: \"js\",\n                    newInstance: () => new AesJS()\n                },\n                {\n                    name: \"AES CBC\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.aes(benchmarkset.externalData.data))\n                }/*,\n                {\n                    name: \"AES CBC\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.aes(benchmarkset.externalData.data))\n                }*/\n            ],\n            parameters: [\n                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n                [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n            ],\n            externalData: {\n                type: \"bytes\",\n                path: \"data/random1K.bin\",\n                repeat: 1000\n            },\n            repeat: 20,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },\n        {\n            name: \"Compression\",\n            description: \"Compress data using Deflate\",\n            benchmarks: [\n                {\n                    name: \"Deflate\",\n                    player: \"js\",\n                    newInstance: () => new DeflateJS()\n                },\n                {\n                    name: \"Deflate\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.rust.deflate(benchmarkset.externalData.data))\n                },\n                {\n                    name: \"Deflate prepared\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(() => window.wasm.rust.deflate_prepared())\n                }/*,\n                {\n                    name: \"Deflate\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.deflate(benchmarkset.externalData.data))\n                },\n                {\n                    name: \"Deflate prepared\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmarkset => window.wasm.go.deflate_prepared())\n                }*/\n            ],\n            parameters: [],\n            externalData: {\n                type: \"bytes\",\n                path: \"data/random1K.bin\",\n                repeat: 1000\n            },\n            repeat: 20,\n            chart: areaChartOptions,\n            result: [],\n            error: null\n        },\n        /*{\n            name: \"EXIF Reader\",\n            description: \"exif reader\",\n            benchmarks: [\n                {\n                    name: \"exif\",\n                    player: \"js\",\n                    newInstance: () => new ExifReaderJS()\n                },\n                {\n                    name: \"exif\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(() => window.wasm.rust.exif())\n                }/*,\n                {\n                    name: \"exif\",\n                    player: \"go\",\n                    newInstance: () => new ExifReaderGo()\n                }* /\n            ],\n            parameters: [],\n            externalData: {\n                type: \"bytes\",\n                path: \"data/exif.jpg\",\n                repeat: 1\n            },\n            repeat: 5,\n            chart: areaChartOptions,\n            showCanvas: true,\n            canvas: null,\n            result: [],\n            error: null\n        },*/\n        {\n            name: \"Convolution filter\",\n            description: \"Manipulate an image using a convolution filter\",\n            benchmarks: [\n                {\n                    name: \"convolve\",\n                    player: \"js\",\n                    newInstance: () => new ConvolveJS()\n                },\n                {\n                    name: \"convolve\",\n                    player: \"rust\",\n                    newInstance: () => new ConvolveRust()\n                }/*,\n                {\n                    name: \"convolve\",\n                    player: \"go\",\n                    newInstance: () => new ConvolveGo()\n                }*/\n            ],\n            parameters: [],\n            externalData: {\n                type: \"image\",\n                path: \"data/photo.jpg\",\n                repeat: 1\n            },\n            repeat: 20,\n            chart: areaChartOptions,\n            showCanvas: true,\n            canvas: null,\n            result: [],\n            error: null\n        },\n        {\n            name: \"Video filter\",\n            description: \"Manipulate a video using a convolution filter\",\n            benchmarks: [\n                {\n                    name: \"convolve video\",\n                    player: \"js\",\n                    newInstance: () => new ConvolveVideoJS()\n                },\n                {\n                    name: \"convolve video\",\n                    player: \"rust\",\n                    newInstance: () => new ConvolveVideoRust()\n                }/*,\n                {\n                    name: \"convolve video\",\n                    player: \"go\",\n                    newInstance: () => new ConvolveVideoGo()\n                }*/\n            ],\n            parameters: [],\n            externalData: {\n                type: \"video\",\n                path: \"data/flowers.mp4\",\n                repeat: 1\n            },\n            repeat: 1,\n            chart: barChartOptions,\n            showCanvas: true,\n            canvas: null,\n            video: null,\n            result: [],\n            error: null\n        },\n        {\n            name: \"DOM manipulation\",\n            description: \"Create, add and remove nodes to the documents DOM tree\",\n            benchmarks: [\n                {\n                    name: \"dom\",\n                    player: \"js\",\n                    newInstance: () => new DomJS()\n                },\n                {\n                    name: \"dom\",\n                    player: \"rust\",\n                    newInstance: () => new DefaultBenchmark(benchmark => window.wasm.rust.dom(...benchmark.parameters))\n                }/*,\n                {\n                    name: \"dom\",\n                    player: \"go\",\n                    newInstance: () => new DefaultBenchmark(benchmark => window.wasm.go.dom(...benchmark.parameters))\n                }*/\n            ],\n            parameters: [1000],\n            repeat: 20,\n            chart: areaChartOptions,\n            showCanvas: true,\n            canvas: null,\n            video: null,\n            result: [],\n            error: null\n        }\n    ]\n};\n\nexport default config;\n","const mediaLoader = (src, element) => {\n    const promise = new Promise((resolve, reject) => {\n        if (element instanceof HTMLImageElement) {\n            element.addEventListener(\"load\", event => {\n                resolve(element);\n            }, false);\n            element.src = src;\n        } else if (element instanceof HTMLVideoElement) {\n            element.addEventListener(\"loadeddata\", event => {\n                resolve(element);\n            }, false);\n            element.src = src;\n            element.load();\n        } else {\n            throw new Error(\"Invalid media type \" + typeof element);\n        }\n        element.addEventListener(\"error\", errorEvent => {\n            reject(errorEvent);\n        }, false);\n    });\n    return promise;\n};\n\nexport {mediaLoader};\n","import config from \"./config\";\nimport {mediaLoader} from \"./mediaLoader\";\n\nconst loadExternalData = async externalData => {\n\n    let data = null;\n\n    // Download external benchmark data for JS\n    if (externalData) {\n        let element;\n        if (externalData.type === \"image\") {\n            element = new Image();\n        } else if (externalData.type === \"video\") {\n            element = document.createElement(\"video\");\n        }\n        if ([\"image\", \"video\"].includes(externalData.type)) {\n            data = await mediaLoader(externalData.path, element);\n        } else if(externalData.type === \"bytes\") {\n            let response = await fetch(externalData.path);\n            let buffer = await response.arrayBuffer();\n            data = new Uint8Array(buffer);\n        } else {\n            let response = await fetch(externalData.path);\n            try {\n                data = await response.clone().json();\n            } catch (e) {\n                data = await response.text();\n            }\n        }\n        if (externalData && externalData.repeat > 1) {\n            if (data instanceof Uint8Array) {\n                let array = new Uint8Array(externalData.repeat * data.length);\n                for (let i = 0; i < externalData.repeat; i++) {\n                    array.set(data, i * data.length);\n                }\n                data = array;\n            } else if (typeof data == \"object\") {\n                data = Array(externalData.repeat)\n                    .fill(data)\n                    .flat();\n            } else {\n                data = String(data).repeat(externalData.repeat);\n            }\n        }\n    }\n\n    if (data !== null) {\n        externalData.data = data;\n    }\n    return externalData;\n};\n\nconst doExternalData = (externalData, benchmarks, what) => {\n    if (externalData && [\"bytes\", \"sort\"].includes(externalData.type)) {\n        Object.keys(config.players).forEach(playerName => {\n            if (config.players[playerName].type === \"wasm\" && benchmarks.some(benchmark => benchmark.player === playerName)) {\n                switch (what) {\n                    case \"prepare\":\n                        window.wasm[playerName].prepare_test_data(externalData.type, externalData.data);\n                        break;\n                    case \"reset\":\n                        window.wasm[playerName].reset_test_data(externalData.type);\n                        break;\n                    case \"clear\":\n                        window.wasm[playerName].clear_test_data(externalData.type);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        });\n    }\n    if (externalData && what === \"clear\") {\n        externalData.data = null;\n    }\n};\n\nconst prepareExternalData = (externalData, benchmarks) => doExternalData(externalData, benchmarks, \"prepare\");\nconst resetExternalData = (externalData, benchmarks) => doExternalData(externalData, benchmarks, \"reset\");\nconst clearExternalData = (externalData, benchmarks) => doExternalData(externalData, benchmarks, \"clear\");\n\nconst runBenchmarkset = async (benchmarkset, onLoad) => {\n\n    await loadExternalData(benchmarkset.externalData);\n    prepareExternalData(benchmarkset.externalData, benchmarkset.benchmarks);\n\n    // Prepare statistics\n    let categories = [];\n    let series = [];\n    let colors = [];\n\n    for (let index = 0; index < benchmarkset.benchmarks.length; index++) {\n        const benchmark = benchmarkset.benchmarks[index];\n        colors.push(config.players[benchmark.player].color);\n        for (let i = 0; i < benchmarkset.repeat; i++) {\n            if (categories.length < benchmarkset.repeat) {\n                categories.push(i + 1);\n            }\n            if (!series[index]) {\n                series[index] = {\n                    name: benchmark.player + \": \" + benchmark.name,\n                    data: []\n                };\n            }\n        }\n    }\n\n    // Run all benchmarks\n    for (let index = 0; index < benchmarkset.benchmarks.length; index++) {\n        const benchmark = benchmarkset.benchmarks[index];\n        for (let i = 0; i < benchmarkset.repeat; i++) {\n            resetExternalData(benchmarkset.externalData, benchmarkset.benchmarks);\n            let instance = benchmark.newInstance();\n            instance.onLoad = onLoad;\n            await instance.run(benchmarkset);\n            series[index].data.push(instance.results());\n        }\n    }\n\n    clearExternalData(benchmarkset.externalData, benchmarkset.benchmarks);\n\n    return {categories, series, colors};\n};\n\nexport {runBenchmarkset};\n","import React, {Component} from 'react';\nimport {Button, Header, Image, List, Message, Segment, Table} from 'semantic-ui-react'\nimport config from \"../lib/config\";\nimport Chart from \"react-apexcharts\";\nimport {roundFormatter} from \"../lib/util\";\n\nclass Benchmark extends Component {\n\n    fitToParent(element) {\n        const ratio = element.parentElement.clientWidth / element.width;\n        if (ratio > 1) {\n            return;\n        }\n        element.style.width = element.parentElement.clientWidth + \"px\";\n        element.style.height = (ratio * element.height) + \"px\";\n    }\n\n    setMediaElement(parent, element) {\n        if (parent) {\n            parent.innerHTML = \"\";\n            parent.appendChild(element);\n            this.fitToParent(element);\n            window.addEventListener('resize', () => this.fitToParent(element), false);\n        }\n    }\n\n    seriesAvg(series) {\n        return series.map(series => {\n            return {\n                name: series.name,\n                avg: series.data.reduce((a, b) => a + b, 0) / series.data.length\n            }\n        });\n    }\n\n    render() {\n        return <Segment>\n            <Header as=\"h2\" floated=\"left\">\n                {this.props.name}\n                <Header.Subheader>{this.props.description}</Header.Subheader>\n            </Header>\n            <Button circular basic color=\"teal\" icon=\"play circle\" content=\"Run\" floated=\"right\"\n                    onClick={() => this.props.onRun(this.props)}\n                    disabled={this.props.someRunning}\n                    loading={this.props.running}/>\n            <Header as=\"h3\" style={{clear: 'both'}}>Benchmarks</Header>\n            <List horizontal divided>\n                {this.props.benchmarks.map(benchmark =>\n                    <List.Item key={benchmark.name + \"-\" + benchmark.player}>\n                        <Image avatar src={config.players[benchmark.player].logo} alt={benchmark.player}/>\n                        <List.Content>\n                            <List.Header>{benchmark.name}</List.Header>\n                        </List.Content>\n                    </List.Item>\n                )}\n            </List>\n\n            {this.props.canvas\n                ? <React.Fragment>\n                    <Header as=\"h3\">Canvas</Header>\n                    <div ref={div => this.setMediaElement(div, this.props.canvas)}/>\n                    {this.props.video\n                        ? <div ref={div => this.setMediaElement(div, this.props.video)}/>\n                        : null}\n                </React.Fragment>\n                : null}\n\n            {this.props.series && this.props.series[0].data.length\n                ? <React.Fragment>\n                    <Header as=\"h3\">Results</Header>\n                    <Chart\n                    options={this.props.chart}\n                    series={this.props.series}\n                    {...this.props.chart.chart}\n                    height=\"300\"\n                />\n                    <Table definition celled>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell />\n                                {this.props.series.map(series => <Table.HeaderCell key={series.name}>{series.name}</Table.HeaderCell>)}\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            <Table.Row>\n                                <Table.Cell>Average</Table.Cell>\n                                {this.seriesAvg(this.props.series).map(series => <Table.Cell key={series.name}>{roundFormatter(series.avg)}</Table.Cell>)}\n                            </Table.Row>\n                        </Table.Body>\n                    </Table>\n                </React.Fragment>\n                : null}\n            {this.props.error ?\n                <Message error header=\"Some benchmarks had errors\"\n                         content={\n                             this.props.error instanceof Error\n                                 ? this.props.error.stack\n                                 : this.props.error} /> : null\n            }\n        </Segment>\n    }\n}\n\nexport default Benchmark;\n","import React, {Component} from 'react';\nimport {Button, Container, Divider, Header, Progress} from \"semantic-ui-react\";\nimport {runBenchmarkset} from \"../lib/benchmarkRunner\";\nimport Benchmark from \"./Benchmark\";\n\nclass BenchmarksPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            running: false,\n            progress: 0,\n            progressTotal: 0,\n            benchmarksets: props.benchmarksets\n        };\n    }\n\n    setStatePromise = state => new Promise(resolve => {\n        this.setState(state, () => {\n            setTimeout(() => resolve(), 1);\n        });\n    });\n\n    onRunAllBenchmarksets = async () => {\n        await  this.setStatePromise({\n            running: true,\n            progress: 0,\n            progressTotal: this.props.benchmarksets.length\n        });\n        for (let i = 0; i < this.state.benchmarksets.length; i++) {\n            try {\n                await this.setStatePromise({progress: i + 1});\n                await this.onRunBenchmarkset(this.props.benchmarksets[i]);\n            } catch(e) {\n                console.error(e);\n            }\n        }\n        await this.setStatePromise({running: false});\n    };\n\n    onBenchmarksetLoad = async benchmarkset => {\n        await this.setStatePromise(state => {\n            let entry = state.benchmarksets.filter(entry => entry.name === benchmarkset.name)[0];\n            Object.assign(entry, benchmarkset);\n            return state;\n        });\n    };\n\n    onRunBenchmarkset = async benchmarkset => {\n        await this.setStatePromise(state => {\n            let entry = state.benchmarksets.filter(entry => entry.name === benchmarkset.name)[0];\n            entry.running = true;\n            return state;\n        });\n\n        let result;\n        let error;\n        try {\n            result = await runBenchmarkset(benchmarkset, this.onBenchmarksetLoad);\n        } catch (e) {\n            error = e;\n        }\n\n        await this.setStatePromise(state => {\n            let entry = state.benchmarksets.filter(benchEntry => benchEntry.name === benchmarkset.name)[0];\n            entry.running = false;\n            if (result) {\n                entry.chart.xaxis.categories = result.categories;\n                entry.series = result.series;\n                entry.chart.colors = result.colors;\n            } else if (error) {\n                entry.error = error;\n            } else {\n                entry.error = \"Unknown error\";\n            }\n            entry.canvas = null;\n            return state;\n        });\n\n        return result;\n    };\n\n    render() {\n        return <Container>\n            <Divider hidden />\n            <Header as=\"h1\" floated=\"left\">Benchmark-Sets</Header>\n            <Button circular color=\"teal\" icon=\"play circle\" content=\"Run all benchmarks\" floated=\"right\"\n                    loading={this.state.running}\n                    onClick={this.onRunAllBenchmarksets}\n                    disabled={this.state.running || this.state.benchmarksets.some(bench => bench.running)}/>\n            {this.state.running && this.state.progressTotal\n                ? <div style={{clear: 'both'}}>\n                    <Progress value={this.state.progress} total={this.state.progressTotal} progress=\"ratio\"/>\n                </div>\n                : null}\n            <div style={{clear: 'both'}}>{\n                this.state.benchmarksets.map(benchmark => {\n                    return <Benchmark key={benchmark.name} {...benchmark}\n                                      someRunning={this.state.running || this.state.benchmarksets.some(bench => bench.running)}\n                                      onRun={this.onRunBenchmarkset} />;\n                })\n            }</div>\n            <Divider hidden />\n        </Container>\n    }\n}\n\nexport default BenchmarksPage;\n","import React, {Component} from 'react';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport BenchmarksPage from \"./BenchmarksPage\";\nimport Benchmark from \"./Benchmark\";\nimport {Message} from \"semantic-ui-react\";\nimport config from \"../lib/config\";\n\nclass WebassemblyTestApp extends Component {\n\n    constructor(props) {\n        super(props);\n        window.wasm = {};\n        this.state = {\n            loading: true,\n            error: false\n        };\n    }\n\n    componentDidMount() {\n        //const go = new window.Go();\n        Promise.all([\n            import(\"webassembly-benchmarks-rust\"),\n            // WebAssembly.instantiateStreaming(fetch('go/webassembly-benchmarks-go.wasm'), {\n            //     ...go.importObject\n            // }),\n        ])\n            .then(module => {\n                window.wasm.rust = module[0];\n                //go.run(module[1].instance);\n                this.setState({loading: false});\n            })\n            .catch(error => this.setState({error: error.message}));\n    }\n\n    render() {\n        if (this.state.error) {\n            return <Message error>Could not start application: {this.state.error}</Message>\n        } else if (!this.state.loading) {\n            return <main>\n                <HashRouter>\n                    <Switch>\n                        <Route path='/' render={() => <BenchmarksPage benchmarksets={config.benchmarksets}/>}/>\n                        <Route path='/test/:id' component={Benchmark}/>\n                    </Switch>\n                </HashRouter>\n            </main>\n        } else {\n            return <div>Loading...</div>\n        }\n    }\n}\n\nexport default WebassemblyTestApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. WebassemblyTestApp is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport WebassemblyTestApp from './components/WebassemblyTestApp';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\n\nReactDOM.render(\n    <WebassemblyTestApp />\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}