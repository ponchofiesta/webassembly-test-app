{"version":3,"sources":["../../webassembly-tests-rust/pkg/webassembly_benchmarks_rust.js"],"names":["__webpack_require__","r","__webpack_exports__","d","fibonacci","hanoi","sort","prime","aes","deflate","convolve","prepare_test_data","reset_test_data","clear_test_data","__widl_instanceof_CanvasRenderingContext2D","__widl_f_get_image_data_CanvasRenderingContext2D","__widl_f_put_image_data_CanvasRenderingContext2D","__widl_f_get_context_HTMLCanvasElement","__widl_f_width_HTMLCanvasElement","__widl_f_height_HTMLCanvasElement","__widl_f_new_with_u8_clamped_array_and_sh_ImageData","__widl_f_width_ImageData","__widl_f_height_ImageData","__widl_f_data_ImageData","__widl_f_debug_1_","__wbindgen_object_drop_ref","__wbindgen_string_new","__wbindgen_string_get","__wbindgen_debug_string","__wbindgen_json_serialize","__wbindgen_throw","_webassembly_benchmarks_rust_bg__WEBPACK_IMPORTED_MODULE_0__","arg0","cachedTextEncoder","TextEncoder","cachegetUint8Memory","getUint8Memory","buffer","Uint8Array","WASM_VECTOR_LEN","passStringToWasm","arg","buf","encode","ptr","length","set","cachedTextDecoder","TextDecoder","getStringFromWasm","len","decode","subarray","cachedGlobalArgumentPtr","cachegetUint32Memory","getUint32Memory","Uint32Array","arg1","arg2","arg3","ptr1","len1","ptr2","len2","ptr3","len3","retptr","mem","rustptr","rustlen","realRet","slice","heap","Array","fill","undefined","push","stack_pointer","obj","Error","addBorrowedObject","heap_next","addHeapObject","idx","ptr0","len0","getObject","CanvasRenderingContext2D","handleError","exnptr","e","view","arg4","getImageData","putImageData","x","varg1","val","getContext","width","height","cachegetUint8ClampedMemory","getClampedArrayU8FromWasm","Uint8ClampedArray","varg0","ImageData","ret","passArray8ToWasm","data","retlen","console","debug","i","p","l","len_ptr","toString","Object","prototype","debug_str","type","concat","description","name","isArray","_debug","_i","className","builtInMatches","exec","call","JSON","stringify","_","message","stack","ptrptr"],"mappings":"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","file":"static/js/3.f906132e.chunk.js","sourcesContent":["/* tslint:disable */\nimport * as wasm from './webassembly_benchmarks_rust_bg';\n/**\n* @param {number} arg0\n* @returns {number}\n*/\n\nexport function fibonacci(arg0) {\n  return wasm.fibonacci(arg0);\n}\nvar cachedTextEncoder = new TextEncoder('utf-8');\nvar cachegetUint8Memory = null;\n\nfunction getUint8Memory() {\n  if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory;\n}\n\nvar WASM_VECTOR_LEN = 0;\n\nfunction passStringToWasm(arg) {\n  var buf = cachedTextEncoder.encode(arg);\n\n  var ptr = wasm.__wbindgen_malloc(buf.length);\n\n  getUint8Memory().set(buf, ptr);\n  WASM_VECTOR_LEN = buf.length;\n  return ptr;\n}\n\nvar cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nvar cachedGlobalArgumentPtr = null;\n\nfunction globalArgumentPtr() {\n  if (cachedGlobalArgumentPtr === null) {\n    cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n  }\n\n  return cachedGlobalArgumentPtr;\n}\n\nvar cachegetUint32Memory = null;\n\nfunction getUint32Memory() {\n  if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory;\n}\n/**\n* @param {number} arg0\n* @param {string} arg1\n* @param {string} arg2\n* @param {string} arg3\n* @returns {string}\n*/\n\n\nexport function hanoi(arg0, arg1, arg2, arg3) {\n  var ptr1 = passStringToWasm(arg1);\n  var len1 = WASM_VECTOR_LEN;\n  var ptr2 = passStringToWasm(arg2);\n  var len2 = WASM_VECTOR_LEN;\n  var ptr3 = passStringToWasm(arg3);\n  var len3 = WASM_VECTOR_LEN;\n  var retptr = globalArgumentPtr();\n\n  try {\n    wasm.hanoi(retptr, arg0, ptr1, len1, ptr2, len2, ptr3, len3);\n    var mem = getUint32Memory();\n    var rustptr = mem[retptr / 4];\n    var rustlen = mem[retptr / 4 + 1];\n    var realRet = getStringFromWasm(rustptr, rustlen).slice();\n\n    wasm.__wbindgen_free(rustptr, rustlen * 1);\n\n    return realRet;\n  } finally {\n    wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    wasm.__wbindgen_free(ptr2, len2 * 1);\n\n    wasm.__wbindgen_free(ptr3, len3 * 1);\n  }\n}\n/**\n* @returns {void}\n*/\n\nexport function sort() {\n  return wasm.sort();\n}\n/**\n* @param {number} arg0\n* @returns {void}\n*/\n\nexport function prime(arg0) {\n  return wasm.prime(arg0);\n}\n/**\n* @returns {void}\n*/\n\nexport function aes() {\n  return wasm.aes();\n}\n/**\n* @returns {void}\n*/\n\nexport function deflate() {\n  return wasm.deflate();\n}\nvar heap = new Array(32);\nheap.fill(undefined);\nheap.push(undefined, null, true, false);\nvar stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n  if (stack_pointer == 1) throw new Error('out of js stack');\n  heap[--stack_pointer] = obj;\n  return stack_pointer;\n}\n/**\n* @param {any} arg0\n* @returns {void}\n*/\n\n\nexport function convolve(arg0) {\n  try {\n    return wasm.convolve(addBorrowedObject(arg0));\n  } finally {\n    heap[stack_pointer++] = undefined;\n  }\n}\nvar heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  var idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\n/**\n* @param {string} arg0\n* @param {any} arg1\n* @returns {void}\n*/\n\n\nexport function prepare_test_data(arg0, arg1) {\n  var ptr0 = passStringToWasm(arg0);\n  var len0 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.prepare_test_data(ptr0, len0, addHeapObject(arg1));\n  } finally {\n    wasm.__wbindgen_free(ptr0, len0 * 1);\n  }\n}\n/**\n* @param {string} arg0\n* @returns {void}\n*/\n\nexport function reset_test_data(arg0) {\n  var ptr0 = passStringToWasm(arg0);\n  var len0 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.reset_test_data(ptr0, len0);\n  } finally {\n    wasm.__wbindgen_free(ptr0, len0 * 1);\n  }\n}\n/**\n* @param {string} arg0\n* @returns {void}\n*/\n\nexport function clear_test_data(arg0) {\n  var ptr0 = passStringToWasm(arg0);\n  var len0 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.clear_test_data(ptr0, len0);\n  } finally {\n    wasm.__wbindgen_free(ptr0, len0 * 1);\n  }\n}\n\nfunction getObject(idx) {\n  return heap[idx];\n}\n\nexport function __widl_instanceof_CanvasRenderingContext2D(idx) {\n  return getObject(idx) instanceof CanvasRenderingContext2D ? 1 : 0;\n}\n\nfunction handleError(exnptr, e) {\n  var view = getUint32Memory();\n  view[exnptr / 4] = 1;\n  view[exnptr / 4 + 1] = addHeapObject(e);\n}\n\nexport function __widl_f_get_image_data_CanvasRenderingContext2D(arg0, arg1, arg2, arg3, arg4, exnptr) {\n  try {\n    return addHeapObject(getObject(arg0).getImageData(arg1, arg2, arg3, arg4));\n  } catch (e) {\n    handleError(exnptr, e);\n  }\n}\nexport function __widl_f_put_image_data_CanvasRenderingContext2D(arg0, arg1, arg2, arg3, exnptr) {\n  try {\n    getObject(arg0).putImageData(getObject(arg1), arg2, arg3);\n  } catch (e) {\n    handleError(exnptr, e);\n  }\n}\n\nfunction isLikeNone(x) {\n  return x === undefined || x === null;\n}\n\nexport function __widl_f_get_context_HTMLCanvasElement(arg0, arg1, arg2, exnptr) {\n  var varg1 = getStringFromWasm(arg1, arg2);\n\n  try {\n    var val = getObject(arg0).getContext(varg1);\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n  } catch (e) {\n    handleError(exnptr, e);\n  }\n}\nexport function __widl_f_width_HTMLCanvasElement(arg0) {\n  return getObject(arg0).width;\n}\nexport function __widl_f_height_HTMLCanvasElement(arg0) {\n  return getObject(arg0).height;\n}\nvar cachegetUint8ClampedMemory = null;\n\nfunction getUint8ClampedMemory() {\n  if (cachegetUint8ClampedMemory === null || cachegetUint8ClampedMemory.buffer !== wasm.memory.buffer) {\n    cachegetUint8ClampedMemory = new Uint8ClampedArray(wasm.memory.buffer);\n  }\n\n  return cachegetUint8ClampedMemory;\n}\n\nfunction getClampedArrayU8FromWasm(ptr, len) {\n  return getUint8ClampedMemory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nexport function __widl_f_new_with_u8_clamped_array_and_sh_ImageData(arg0, arg1, arg2, arg3, exnptr) {\n  var varg0 = getClampedArrayU8FromWasm(arg0, arg1);\n\n  try {\n    return addHeapObject(new ImageData(varg0, arg2, arg3));\n  } catch (e) {\n    handleError(exnptr, e);\n  }\n}\nexport function __widl_f_width_ImageData(arg0) {\n  return getObject(arg0).width;\n}\nexport function __widl_f_height_ImageData(arg0) {\n  return getObject(arg0).height;\n}\n\nfunction passArray8ToWasm(arg) {\n  var ptr = wasm.__wbindgen_malloc(arg.length * 1);\n\n  getUint8Memory().set(arg, ptr / 1);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n\nexport function __widl_f_data_ImageData(ret, arg0) {\n  var retptr = passArray8ToWasm(getObject(arg0).data);\n  var retlen = WASM_VECTOR_LEN;\n  var mem = getUint32Memory();\n  mem[ret / 4] = retptr;\n  mem[ret / 4 + 1] = retlen;\n}\nexport function __widl_f_debug_1_(arg0) {\n  console.debug(getObject(arg0));\n}\n\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\n\nexport function __wbindgen_object_drop_ref(i) {\n  dropObject(i);\n}\nexport function __wbindgen_string_new(p, l) {\n  return addHeapObject(getStringFromWasm(p, l));\n}\nexport function __wbindgen_string_get(i, len_ptr) {\n  var obj = getObject(i);\n  if (typeof obj !== 'string') return 0;\n  var ptr = passStringToWasm(obj);\n  getUint32Memory()[len_ptr / 4] = WASM_VECTOR_LEN;\n  return ptr;\n}\nexport function __wbindgen_debug_string(i, len_ptr) {\n  var toString = Object.prototype.toString;\n\n  var debug_str = function debug_str(val) {\n    // primitive types\n    var type = typeof val;\n\n    if (type == 'number' || type == 'boolean' || val == null) {\n      return \"\".concat(val);\n    }\n\n    if (type == 'string') {\n      return \"\\\"\".concat(val, \"\\\"\");\n    }\n\n    if (type == 'symbol') {\n      var description = val.description;\n\n      if (description == null) {\n        return 'Symbol';\n      } else {\n        return \"Symbol(\".concat(description, \")\");\n      }\n    }\n\n    if (type == 'function') {\n      var name = val.name;\n\n      if (typeof name == 'string' && name.length > 0) {\n        return \"Function(\".concat(name, \")\");\n      } else {\n        return 'Function';\n      }\n    } // objects\n\n\n    if (Array.isArray(val)) {\n      var length = val.length;\n      var _debug = '[';\n\n      if (length > 0) {\n        _debug += debug_str(val[0]);\n      }\n\n      for (var _i = 1; _i < length; _i++) {\n        _debug += ', ' + debug_str(val[_i]);\n      }\n\n      _debug += ']';\n      return _debug;\n    } // Test for built-in\n\n\n    var builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    var className;\n\n    if (builtInMatches.length > 1) {\n      className = builtInMatches[1];\n    } else {\n      // Failed to match the standard '[object ClassName]'\n      return toString.call(val);\n    }\n\n    if (className == 'Object') {\n      // we're a user defined class or Object\n      // JSON.stringify avoids problems with cycles, and is generally much\n      // easier than looping through ownProperties of `val`.\n      try {\n        return 'Object(' + JSON.stringify(val) + ')';\n      } catch (_) {\n        return 'Object';\n      }\n    } // errors\n\n\n    if (val instanceof Error) {\n      return \"\".concat(val.name, \": \").concat(val.message, \"\\n        \").concat(val.stack);\n    } // TODO we could test for more things here, like `Set`s and `Map`s.\n\n\n    return className;\n  };\n\n  var val = getObject(i);\n  var debug = debug_str(val);\n  var ptr = passStringToWasm(debug);\n  getUint32Memory()[len_ptr / 4] = WASM_VECTOR_LEN;\n  return ptr;\n}\nexport function __wbindgen_json_serialize(idx, ptrptr) {\n  var ptr = passStringToWasm(JSON.stringify(getObject(idx)));\n  getUint32Memory()[ptrptr / 4] = ptr;\n  return WASM_VECTOR_LEN;\n}\nexport function __wbindgen_throw(ptr, len) {\n  throw new Error(getStringFromWasm(ptr, len));\n}"],"sourceRoot":""}