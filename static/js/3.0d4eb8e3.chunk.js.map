{"version":3,"sources":["../../webassembly-tests-rust/pkg/webassembly_tests_rust.js"],"names":["__webpack_require__","r","__webpack_exports__","d","fibonacci","hanoi","sort","prepare_test_data","reset_test_data","clear_test_data","__widl_f_log_1_","__wbindgen_object_drop_ref","__wbindgen_string_new","__wbindgen_json_serialize","__wbindgen_throw","_webassembly_tests_rust_bg__WEBPACK_IMPORTED_MODULE_0__","arg0","cachedTextEncoder","TextEncoder","cachegetUint8Memory","getUint8Memory","buffer","Uint8Array","WASM_VECTOR_LEN","passStringToWasm","arg","buf","encode","ptr","length","set","cachedTextDecoder","TextDecoder","getStringFromWasm","len","decode","subarray","cachedGlobalArgumentPtr","cachegetUint32Memory","getUint32Memory","Uint32Array","arg1","arg2","arg3","ptr1","len1","ptr2","len2","ptr3","len3","retptr","mem","rustptr","rustlen","realRet","slice","heap","Array","fill","undefined","push","heap_next","addHeapObject","obj","idx","ptr0","len0","getObject","console","log","i","p","l","ptrptr","JSON","stringify","Error"],"mappings":"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","file":"static/js/3.0d4eb8e3.chunk.js","sourcesContent":["/* tslint:disable */\nimport * as wasm from './webassembly_tests_rust_bg';\n/**\n* @param {number} arg0\n* @returns {number}\n*/\n\nexport function fibonacci(arg0) {\n  return wasm.fibonacci(arg0);\n}\nvar cachedTextEncoder = new TextEncoder('utf-8');\nvar cachegetUint8Memory = null;\n\nfunction getUint8Memory() {\n  if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory;\n}\n\nvar WASM_VECTOR_LEN = 0;\n\nfunction passStringToWasm(arg) {\n  var buf = cachedTextEncoder.encode(arg);\n\n  var ptr = wasm.__wbindgen_malloc(buf.length);\n\n  getUint8Memory().set(buf, ptr);\n  WASM_VECTOR_LEN = buf.length;\n  return ptr;\n}\n\nvar cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nvar cachedGlobalArgumentPtr = null;\n\nfunction globalArgumentPtr() {\n  if (cachedGlobalArgumentPtr === null) {\n    cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n  }\n\n  return cachedGlobalArgumentPtr;\n}\n\nvar cachegetUint32Memory = null;\n\nfunction getUint32Memory() {\n  if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory;\n}\n/**\n* @param {number} arg0\n* @param {string} arg1\n* @param {string} arg2\n* @param {string} arg3\n* @returns {string}\n*/\n\n\nexport function hanoi(arg0, arg1, arg2, arg3) {\n  var ptr1 = passStringToWasm(arg1);\n  var len1 = WASM_VECTOR_LEN;\n  var ptr2 = passStringToWasm(arg2);\n  var len2 = WASM_VECTOR_LEN;\n  var ptr3 = passStringToWasm(arg3);\n  var len3 = WASM_VECTOR_LEN;\n  var retptr = globalArgumentPtr();\n\n  try {\n    wasm.hanoi(retptr, arg0, ptr1, len1, ptr2, len2, ptr3, len3);\n    var mem = getUint32Memory();\n    var rustptr = mem[retptr / 4];\n    var rustlen = mem[retptr / 4 + 1];\n    var realRet = getStringFromWasm(rustptr, rustlen).slice();\n\n    wasm.__wbindgen_free(rustptr, rustlen * 1);\n\n    return realRet;\n  } finally {\n    wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    wasm.__wbindgen_free(ptr2, len2 * 1);\n\n    wasm.__wbindgen_free(ptr3, len3 * 1);\n  }\n}\n/**\n* @returns {void}\n*/\n\nexport function sort() {\n  return wasm.sort();\n}\nvar heap = new Array(32);\nheap.fill(undefined);\nheap.push(undefined, null, true, false);\nvar heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  var idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\n/**\n* @param {string} arg0\n* @param {any} arg1\n* @returns {void}\n*/\n\n\nexport function prepare_test_data(arg0, arg1) {\n  var ptr0 = passStringToWasm(arg0);\n  var len0 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.prepare_test_data(ptr0, len0, addHeapObject(arg1));\n  } finally {\n    wasm.__wbindgen_free(ptr0, len0 * 1);\n  }\n}\n/**\n* @param {string} arg0\n* @returns {void}\n*/\n\nexport function reset_test_data(arg0) {\n  var ptr0 = passStringToWasm(arg0);\n  var len0 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.reset_test_data(ptr0, len0);\n  } finally {\n    wasm.__wbindgen_free(ptr0, len0 * 1);\n  }\n}\n/**\n* @param {string} arg0\n* @returns {void}\n*/\n\nexport function clear_test_data(arg0) {\n  var ptr0 = passStringToWasm(arg0);\n  var len0 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.clear_test_data(ptr0, len0);\n  } finally {\n    wasm.__wbindgen_free(ptr0, len0 * 1);\n  }\n}\n\nfunction getObject(idx) {\n  return heap[idx];\n}\n\nexport function __widl_f_log_1_(arg0) {\n  console.log(getObject(arg0));\n}\n\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\n\nexport function __wbindgen_object_drop_ref(i) {\n  dropObject(i);\n}\nexport function __wbindgen_string_new(p, l) {\n  return addHeapObject(getStringFromWasm(p, l));\n}\nexport function __wbindgen_json_serialize(idx, ptrptr) {\n  var ptr = passStringToWasm(JSON.stringify(getObject(idx)));\n  getUint32Memory()[ptrptr / 4] = ptr;\n  return WASM_VECTOR_LEN;\n}\nexport function __wbindgen_throw(ptr, len) {\n  throw new Error(getStringFromWasm(ptr, len));\n}"],"sourceRoot":""}